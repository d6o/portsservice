// Code generated by MockGen. DO NOT EDIT.
// Source: redis.go

// Package redis is a generated GoMock package.
package redis

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	redis "github.com/redis/go-redis/v9"
)

// MockcontextChecker is a mock of contextChecker interface.
type MockcontextChecker struct {
	ctrl     *gomock.Controller
	recorder *MockcontextCheckerMockRecorder
}

// MockcontextCheckerMockRecorder is the mock recorder for MockcontextChecker.
type MockcontextCheckerMockRecorder struct {
	mock *MockcontextChecker
}

// NewMockcontextChecker creates a new mock instance.
func NewMockcontextChecker(ctrl *gomock.Controller) *MockcontextChecker {
	mock := &MockcontextChecker{ctrl: ctrl}
	mock.recorder = &MockcontextCheckerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockcontextChecker) EXPECT() *MockcontextCheckerMockRecorder {
	return m.recorder
}

// CheckContext mocks base method.
func (m *MockcontextChecker) CheckContext(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckContext", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckContext indicates an expected call of CheckContext.
func (mr *MockcontextCheckerMockRecorder) CheckContext(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckContext", reflect.TypeOf((*MockcontextChecker)(nil).CheckContext), ctx)
}

// Mockclient is a mock of client interface.
type Mockclient struct {
	ctrl     *gomock.Controller
	recorder *MockclientMockRecorder
}

// MockclientMockRecorder is the mock recorder for Mockclient.
type MockclientMockRecorder struct {
	mock *Mockclient
}

// NewMockclient creates a new mock instance.
func NewMockclient(ctrl *gomock.Controller) *Mockclient {
	mock := &Mockclient{ctrl: ctrl}
	mock.recorder = &MockclientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockclient) EXPECT() *MockclientMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *Mockclient) Get(ctx context.Context, key string) *redis.StringCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, key)
	ret0, _ := ret[0].(*redis.StringCmd)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockclientMockRecorder) Get(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*Mockclient)(nil).Get), ctx, key)
}

// Set mocks base method.
func (m *Mockclient) Set(ctx context.Context, key string, value interface{}, expiration time.Duration) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", ctx, key, value, expiration)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockclientMockRecorder) Set(ctx, key, value, expiration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*Mockclient)(nil).Set), ctx, key, value, expiration)
}
