// Code generated by MockGen. DO NOT EDIT.
// Source: memory.go

// Package memory is a generated GoMock package.
package memory

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockcontextChecker is a mock of contextChecker interface.
type MockcontextChecker struct {
	ctrl     *gomock.Controller
	recorder *MockcontextCheckerMockRecorder
}

// MockcontextCheckerMockRecorder is the mock recorder for MockcontextChecker.
type MockcontextCheckerMockRecorder struct {
	mock *MockcontextChecker
}

// NewMockcontextChecker creates a new mock instance.
func NewMockcontextChecker(ctrl *gomock.Controller) *MockcontextChecker {
	mock := &MockcontextChecker{ctrl: ctrl}
	mock.recorder = &MockcontextCheckerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockcontextChecker) EXPECT() *MockcontextCheckerMockRecorder {
	return m.recorder
}

// CheckContext mocks base method.
func (m *MockcontextChecker) CheckContext(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckContext", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckContext indicates an expected call of CheckContext.
func (mr *MockcontextCheckerMockRecorder) CheckContext(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckContext", reflect.TypeOf((*MockcontextChecker)(nil).CheckContext), ctx)
}
